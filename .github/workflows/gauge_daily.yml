name: Daily Gauge + Netlify
on:
  schedule:
    - cron: "30 9 * * *"  # 9:30 UTC every day
  workflow_dispatch: {}
concurrency:
  group: gauge-daily
  cancel-in-progress: false
permissions:
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
      NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      FRED_API_KEY: ${{ secrets.FRED_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        if: hashFiles('app/requirements.txt') != ''
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Build gauge output
        env:
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        run: |
          set -euo pipefail
          echo "üîß Building gauge..."
          if [ -f app/game_over_gauge.py ]; then
            python app/game_over_gauge.py || echo "‚ö†Ô∏è Gauge run failed (non-fatal first run)."
          else
            echo "‚ùå app/game_over_gauge.py not found; aborting."
            exit 1
          fi

          mkdir -p public
          [ -f app/dashboard.html ] && cp -f app/dashboard.html public/dashboard.html
          [ -f app/gauge.json ] && cp -f app/gauge.json public/gauge.json

          if [ ! -d public ] || [ -z "$(ls -A public)" ]; then
            echo "‚ùå ERROR: public/ folder missing or empty after build."
            exit 1
          fi
          echo "‚úÖ Gauge build complete."

      - name: Deploy to Netlify (REST API)
        if: env.NETLIFY_TOKEN != '' && env.NETLIFY_SITE_ID != ''
        run: |
          set -euo pipefail

          echo "üì¶ Preparing deploy package..."
          if [ ! -d public ] || [ -z "$(ls -A public)" ]; then
            echo "‚ùå ERROR: public/ folder missing or empty, cannot deploy."
            exit 1
          fi

          # Build the zip in the current workspace instead of /tmp
          ZIPFILE="netlify_deploy.zip"
          rm -f "$ZIPFILE" || true
          echo "Creating $ZIPFILE from public/ ..."
          zip -qr "$ZIPFILE" public/
          echo "‚úÖ Zip created ($(du -h "$ZIPFILE" | cut -f1))"

          # Sanity-check the zip structure
          unzip -t "$ZIPFILE" >/dev/null

          echo "üöÄ Uploading to Netlify..."
          DEPLOY_JSON="$(curl -fsS -X POST \
            -H "Authorization: Bearer ${NETLIFY_TOKEN}" \
            -H "Content-Type: application/zip" \
            --data-binary @"$ZIPFILE" \
            "https://api.netlify.com/api/v1/sites/${NETLIFY_SITE_ID}/deploys")"

          echo "üßπ Cleaning up"
          rm -f "$ZIPFILE"

          echo "$DEPLOY_JSON" | jq -e .id >/dev/null
          DEPLOY_ID="$(echo "$DEPLOY_JSON" | jq -r .id)"
          echo "‚úÖ Deploy created: $DEPLOY_ID"

          echo "‚è≥ Waiting for deploy to become ready..."
          for i in $(seq 1 40); do
            STATE="$(curl -fsS -H "Authorization: Bearer ${NETLIFY_TOKEN}" \
              "https://api.netlify.com/api/v1/deploys/${DEPLOY_ID}" | jq -r .state)"
            echo "State: $STATE"
            [ "$STATE" = "ready" ] && break
            sleep 3
          done
          echo "üéâ Deployment complete."

