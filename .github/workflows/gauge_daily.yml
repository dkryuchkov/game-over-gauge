name: Daily Gauge + Netlify
on:
  schedule:
    - cron: "30 9 * * *"
  workflow_dispatch: {}
concurrency:
  group: gauge-daily
  cancel-in-progress: false
permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"
      NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
      # Base canonical for sitemap links (Netlify). Change if you prefer Pages.
      SITE_BASE: "https://game-over-gauge.netlify.app"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Ensure zip & jq exist
        run: |
          set -euo pipefail
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y zip
          fi
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        if: hashFiles('app/requirements.txt') != ''
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      - name: Build gauge
        env:
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        run: |
          set -euo pipefail
          if [ -f app/game_over_gauge.py ]; then
            python app/game_over_gauge.py
            mkdir -p public
            [ -f app/dashboard.html ] && cp -f app/dashboard.html public/dashboard.html
            [ -f app/gauge.json ] && cp -f app/gauge.json public/gauge.json
          else
            echo "app/game_over_gauge.py not found; skipping compute."
          fi
          test -f public/dashboard.html || { echo "dashboard.html missing"; exit 1; }
          test -f public/gauge.json || { echo "gauge.json missing"; exit 1; }

      - name: Generate sitemap.xml and robots.txt
        run: |
          set -euo pipefail
          mkdir -p public
          LASTMOD="$(date -u +%Y-%m-%d)"
          cat > public/sitemap.xml <<XML
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>${SITE_BASE}/</loc>
              <lastmod>${LASTMOD}</lastmod>
              <changefreq>daily</changefreq>
              <priority>1.0</priority>
            </url>
            <url>
              <loc>${SITE_BASE}/dashboard.html</loc>
              <lastmod>${LASTMOD}</lastmod>
              <changefreq>daily</changefreq>
              <priority>0.9</priority>
            </url>
            <url>
              <loc>${SITE_BASE}/gauge.json</loc>
              <lastmod>${LASTMOD}</lastmod>
              <changefreq>daily</changefreq>
              <priority>0.5</priority>
            </url>
            <url>
              <loc>${SITE_BASE}/netlify.toml</loc>
              <lastmod>${LASTMOD}</lastmod>
              <changefreq>monthly</changefreq>
              <priority>0.1</priority>
            </url>
          </urlset>
          XML

          cat > public/robots.txt <<ROBOTS
          User-agent: *
          Allow: /
          Sitemap: ${SITE_BASE}/sitemap.xml
          ROBOTS

          echo "Generated public/sitemap.xml and public/robots.txt"
          xmllint --noout public/sitemap.xml 2>/dev/null || echo "xmllint not installed; skipping XML lint."

      - name: Commit & push Pages content
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add public/dashboard.html public/gauge.json public/sitemap.xml public/robots.txt || true
          git diff --staged --quiet || (git commit -m "auto: daily gauge update" && git push)

      - name: Deploy to Netlify (REST)
        if: env.NETLIFY_TOKEN != '' && env.NETLIFY_SITE_ID != ''
        env:
          NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: |
          set -euo pipefail
          test -d public || { echo "public/ not found"; exit 1; }

          # Create a temp dir so the zip does NOT pre-exist (avoids 'Zip file structure invalid').
          TMPDIR="$(mktemp -d)"
          ZIPFILE="${TMPDIR}/deploy.zip"
          (cd public && zip -qr "$ZIPFILE" .)
          test -s "$ZIPFILE" || { echo "zip failed or empty"; ls -l "$ZIPFILE" || true; exit 2; }

          DEPLOY_JSON="$(curl -fsS -X POST \
            -H "Authorization: Bearer ${NETLIFY_TOKEN}" \
            -H "Content-Type: application/zip" \
            --data-binary @"$ZIPFILE" \
            "https://api.netlify.com/api/v1/sites/${NETLIFY_SITE_ID}/deploys")"

          rm -rf "$TMPDIR" || true

          echo "$DEPLOY_JSON" | jq -e .id >/dev/null
          DEPLOY_ID="$(echo "$DEPLOY_JSON" | jq -r .id)"
          echo "Deploy created: $DEPLOY_ID"

          for i in $(seq 1 40); do
            STATE="$(curl -fsS -H "Authorization: Bearer ${NETLIFY_TOKEN}" \
              "https://api.netlify.com/api/v1/deploys/${DEPLOY_ID}" | jq -r .state)"
            echo "State: $STATE"
            [ "$STATE" = "ready" ] && break
            sleep 3
          done

      - name: Ping search engines with sitemap
        if: env.SITE_BASE != ''
        run: |
          set -euo pipefail
          SITEMAP_URL="${SITE_BASE%/}/sitemap.xml"
          echo "Pinging sitemap: $SITEMAP_URL"
          curl -fsS -I "$SITEMAP_URL" >/dev/null 2>&1 || { echo "sitemap not reachable yet (may be first deploy)"; exit 0; }
          curl -fsS "https://www.google.com/ping?sitemap=${SITEMAP_URL}" || true
          curl -fsS "https://www.bing.com/webmaster/ping.aspx?siteMap=${SITEMAP_URL}" || true
          echo "Pinged Google/Bing (best-effort)."
